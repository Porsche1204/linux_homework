But first, just a little remark about Normal mode. In standard editors, to copy you have to use the Ctrl key. In fact, when you press Ctrl, it is as if all of your keys change meaning. Using vim in normal mode is a bit like having the editor automatically press the Ctrl key for you.
A last word about notations:

-instead of writing Ctrl-a, I'll write <C-a>
-commands starting with : end with <enter>. For example, when I write :q, I mean :q<enter>


2nd level - Feel comfortable 

You know the commands required for survival. It's time to learn a few more commands. These are my suggestions:
1.Insert mode 
	-a -> insert after the cursor
	-o -> insert a new line after the current one
	-O -> insert a new line before the current one
	-cw -> replace from the cursor to the end of the word

2.Basic moves
	-0 -> go to the first column
	-^ -> go to the first non-blank character
	-$ -> go to the end of line
	-g_ -> go to the last non-blank character of line
	-/pattern -> search for pattern

3.Copy / Paste
	-u -> undo 
	-<C-r> -> redo

4.Load / Save / Quit / Change File (Buffer)
	-:e <path/to/file> -> open
	-:w -> save
	-:saveas <path/to/file> -> save to <path/to/file>
	-:x, ZZ or :wq -> save and quit (:x only save if necessary
	-:q! -> quit without saving, also :qa! to quit even if there are modified hidden buffers.
	-:bn (resp. :bp ) -> show next (resp. previous) file (buffer)

Take the time to learn all of these command.Once done, you should be able to do every thing you are able to do in other editors. You may still feel a bit awkward. But follow me to the next level and you will konw why vim is worth the extra work.

3rd Level - Better. Stronger. Faster.

Congratulation for reaching this far! Now we can start with the intersting stuff. At level 3, we'll only talk about commands which are compatible with the old vi editor.

Better

Let's look at how vim could help you to repeat youself:

1. . -> (dot) will repeat the last command.
2. N<command> -> will repeat the command N times.

Some example, open a file and type:
	- 2dd -> will delete 2 lines
	- 3p -> will paste the text 3 times
	- 100idesu [ESC] -> will write "desu ... "
	- . -> just after the last command will write again the 100 "desu"
	- 3. -> Will write 3 "desu" (and not 300, how TMD clever).

Stronger

Knowing how to move efficiently with vim is very important. Don't skip this section.

1.NG -> go to the line N
2.gg -> shortcout for 1G - go to the start of the file
3.G -> Go to last line

4.Word moves:
	1. w -> go to the start of the following word,
	2. e -> go to the end of this word.

	By default, words are composed of letters and the underscore character. Let's call a WORD a group of letter separated by blank characters. If you want to consider WORDS, then just use uppercase characters:

	1. W -> go to the start of the following WORD,
	2. E -> go to the end of this WORD.

Now let's talk about very efficient moves:
	
	- % : Go to the corresponding (, {, [.
	- * (resp. #) : go to next (resp. previous) occurrence of the word under the cursor

Believe me, the last three commands are gold.

Faster

Remember about the importance of vi moves? Here is the reason. Most commands can be used using the following general format:

<start position><command><end position>

For example : 0y$ means

- 0 -> go to the beginning of this line
- y -> yank from here
- $ -> up to the end of this line

We also can do things like ye, yank from here to the end of the word. But also y2/foo yank up the second occurrence of "foo".

But what was true for y (yank), is also true for d (delete), v (visual select), gU (uppercase), gu(lowercase), etc ...

With all preceding commands you should be comfortable using vim. But now, here are the killer features. Some of these features were the reson I started to use vim.



